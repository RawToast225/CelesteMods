generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model archive_map {
  id                                  Int        @id @default(autoincrement()) @db.UnsignedMediumInt
  mapId                               Int        @db.UnsignedMediumInt
  modId                               Int        @db.UnsignedSmallInt
  mapperUserId                        Int?       @db.UnsignedSmallInt
  mapperNameString                    String     @db.VarChar(50)
  name                                String     @db.VarChar(200)
  canonicalDifficultyId               Int        @db.UnsignedSmallInt
  lengthId                            Int        @db.UnsignedTinyInt
  description                         String?    @db.VarChar(500)
  notes                               String?    @db.VarChar(500)
  chapter                             Int?       @db.UnsignedTinyInt
  side                                map_side?
  overallRank                         Int?       @db.UnsignedTinyInt
  mapRemovedFromModBool               Boolean    @default(false)
  timeSubmitted                       Int
  submittedBy                         Int?       @db.UnsignedSmallInt
  timeApproved                        Int?
  approvedBy                          Int?       @db.UnsignedSmallInt
  timeArchived                        Int
  map                                 map        @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "archive_map_ibfk_0")
  mod                                 mod        @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "archive_map_ibfk_1")
  user_archive_map_mapperUserIdTouser user?      @relation("archive_map_mapperUserIdTouser", fields: [mapperUserId], references: [id], onUpdate: Restrict, map: "archive_map_ibfk_2")
  difficulty                          difficulty @relation(fields: [canonicalDifficultyId], references: [id], onUpdate: Restrict, map: "archive_map_ibfk_3")
  length                              length     @relation(fields: [lengthId], references: [id], onUpdate: Restrict, map: "archive_map_ibfk_4")
  user_archive_map_submittedByTouser  user?      @relation("archive_map_submittedByTouser", fields: [submittedBy], references: [id], onUpdate: Restrict, map: "archive_map_ibfk_5")
  user_archive_map_approvedByTouser   user?      @relation("archive_map_approvedByTouser", fields: [approvedBy], references: [id], onUpdate: Restrict, map: "archive_map_ibfk_6")

  @@unique([modId, chapter, side], map: "modChapterSide")
  @@index([approvedBy], map: "approvedBy")
  @@index([canonicalDifficultyId], map: "canonicalDifficultyId")
  @@index([lengthId], map: "lengthId")
  @@index([mapId], map: "mapId")
  @@index([mapperUserId], map: "mapperUserId")
  @@index([modId], map: "modId")
  @@index([submittedBy], map: "submittedBy")
}

model archive_mod {
  id                    Int       @id @db.UnsignedSmallInt
  modId                 Int       @db.UnsignedSmallInt
  type                  mod_type  @default(Normal)
  name                  String    @db.VarChar(200)
  publisherId           Int       @db.UnsignedSmallInt
  contentWarning        Boolean   @default(false)
  notes                 String?   @db.VarChar(500)
  shortDescription      String    @db.VarChar(150)
  longDescription       String?   @db.VarChar(1500)
  gamebananaModId       Int       @db.UnsignedMediumInt
  timeSubmitted         Int
  submittedBy           Int?      @db.UnsignedSmallInt
  timeApproved          Int?
  approvedBy            Int?      @db.UnsignedSmallInt
  timeCreatedGamebanana Int
  timeArchived          Int
  mod                   mod       @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "archive_mod_ibfk_0")
  publisher             publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "archive_mod_ibfk_1")
  user                  user?     @relation(fields: [submittedBy], references: [id], onUpdate: Restrict, map: "archive_mod_ibfk_2")

  @@index([approvedBy], map: "approvedBy")
  @@index([contentWarning], map: "contentWarning")
  @@index([modId], map: "modId")
  @@index([publisherId], map: "publisherId")
  @@index([submittedBy], map: "submittedBy")
}

model difficulty {
  id                 Int           @id @default(autoincrement()) @db.UnsignedSmallInt
  name               String        @db.VarChar(50)
  description        String?       @db.VarChar(100)
  parentDifficultyId Int?          @default(0) @db.UnsignedSmallInt
  order              Int           @db.UnsignedTinyInt
  archive_map        archive_map[]
  difficulty         difficulty?   @relation("difficultyTodifficulty", fields: [parentDifficultyId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "difficulty_ibfk_2")
  other_difficulty   difficulty[]  @relation("difficultyTodifficulty")
  map                map[]
  rating             rating[]
  tech               tech[]

  @@unique([parentDifficultyId, name], map: "uniqueName")
  @@unique([parentDifficultyId, order], map: "uniqueOrder")
  @@index([parentDifficultyId], map: "difficulties_ibfk_2")
}

model length {
  id          Int           @id @default(autoincrement()) @db.UnsignedTinyInt
  name        String        @unique(map: "name") @db.VarChar(20)
  description String        @db.VarChar(100)
  order       Int           @unique(map: "order") @db.UnsignedTinyInt
  archive_map archive_map[]
  map         map[]
  review_map  review_map[]
}

model map {
  id                          Int             @id @default(autoincrement()) @db.UnsignedMediumInt
  modId                       Int             @db.UnsignedSmallInt
  mapperUserId                Int?            @db.UnsignedSmallInt
  mapperNameString            String          @db.VarChar(50)
  name                        String          @db.VarChar(200)
  canonicalDifficultyId       Int             @db.UnsignedSmallInt
  lengthId                    Int             @db.UnsignedTinyInt
  description                 String?         @db.VarChar(500)
  notes                       String?         @db.VarChar(500)
  chapter                     Int?            @db.UnsignedTinyInt
  side                        map_side?
  overallRank                 Int?            @db.UnsignedTinyInt
  mapRemovedFromModBool       Boolean         @default(false)
  timeSubmitted               Int
  submittedBy                 Int?            @db.UnsignedSmallInt
  timeApproved                Int?
  approvedBy                  Int?            @db.UnsignedSmallInt
  archive_map                 archive_map[]
  mod                         mod             @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "map_ibfk_1")
  user_map_mapperUserIdTouser user?           @relation("map_mapperUserIdTouser", fields: [mapperUserId], references: [id], onUpdate: Restrict, map: "map_ibfk_2")
  difficulty                  difficulty      @relation(fields: [canonicalDifficultyId], references: [id], onUpdate: Restrict, map: "map_ibfk_3")
  length                      length          @relation(fields: [lengthId], references: [id], onUpdate: Restrict, map: "map_ibfk_4")
  user_map_submittedByTouser  user?           @relation("map_submittedByTouser", fields: [submittedBy], references: [id], onUpdate: Restrict, map: "map_ibfk_5")
  user_map_approvedByTouser   user?           @relation("map_approvedByTouser", fields: [approvedBy], references: [id], onUpdate: Restrict, map: "map_ibfk_6")
  maps_to_techs               maps_to_techs[]
  rating                      rating[]
  review_map                  review_map[]
  users_to_maps               users_to_maps[]

  @@unique([modId, chapter, side], map: "modChapterSide")
  @@index([approvedBy], map: "approvedBy")
  @@index([canonicalDifficultyId], map: "canonicalDifficultyId")
  @@index([lengthId], map: "lengthId")
  @@index([mapperUserId], map: "mapperUserId")
  @@index([modId], map: "modId")
  @@index([submittedBy], map: "submittedBy")
}

model maps_to_techs {
  mapId             Int     @db.UnsignedMediumInt
  techId            Int     @db.UnsignedSmallInt
  fullClearOnlyBool Boolean @default(false)
  map               map     @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "maps_to_techs_ibfk_1")
  tech              tech    @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "maps_to_techs_ibfk_2")

  @@id([mapId, techId])
  @@index([techId], map: "techId")
}

model mod {
  id                         Int           @id @default(autoincrement()) @db.UnsignedSmallInt
  type                       mod_type      @default(Normal)
  name                       String        @db.VarChar(200)
  publisherId                Int           @db.UnsignedSmallInt
  contentWarning             Boolean       @default(false)
  notes                      String?       @db.VarChar(500)
  shortDescription           String        @db.VarChar(150)
  longDescription            String?       @db.VarChar(1500)
  gamebananaModId            Int           @unique(map: "gamebananaModId") @db.UnsignedMediumInt
  timeSubmitted              Int
  submittedBy                Int?          @db.UnsignedSmallInt
  timeApproved               Int?
  approvedBy                 Int?          @db.UnsignedSmallInt
  timeCreatedGamebanana      Int
  archive_map                archive_map[]
  archive_mod                archive_mod[]
  map                        map[]
  publisher                  publisher     @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mod_ibfk_1")
  user_mod_submittedByTouser user?         @relation("mod_submittedByTouser", fields: [submittedBy], references: [id], onUpdate: Restrict, map: "mod_ibfk_2")
  user_mod_approvedByTouser  user?         @relation("mod_approvedByTouser", fields: [approvedBy], references: [id], onUpdate: Restrict, map: "mod_ibfk_3")
  review                     review[]

  @@index([approvedBy], map: "approvedBy")
  @@index([contentWarning], map: "contentWarning")
  @@index([publisherId], map: "publisherId")
  @@index([submittedBy], map: "submittedBy")
}

model publisher {
  id           Int           @id @default(autoincrement()) @db.UnsignedSmallInt
  gamebananaId Int?          @unique(map: "gamebananaId") @db.UnsignedMediumInt
  name         String        @db.VarChar(100)
  userId       Int?          @db.UnsignedSmallInt
  archive_mod  archive_mod[]
  mod          mod[]
  user         user?         @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "publisher_ibfk_1")

  @@index([userId], map: "userId")
}

model quality {
  id          Int      @id @default(autoincrement()) @db.UnsignedTinyInt
  name        String   @unique(map: "name") @db.VarChar(20)
  description String   @db.VarChar(100)
  order       Int      @unique(map: "order") @db.UnsignedTinyInt
  rating      rating[]
}

model rating {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  mapId         Int         @db.UnsignedMediumInt
  submittedBy   Int         @db.UnsignedSmallInt
  timeSubmitted Int
  qualityId     Int?        @db.UnsignedTinyInt
  difficultyId  Int?        @db.UnsignedSmallInt
  user          user        @relation(fields: [submittedBy], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "rating_ibfk_1")
  map           map         @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "rating_ibfk_2")
  difficulty    difficulty? @relation(fields: [difficultyId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "rating_ibfk_3")
  quality       quality?    @relation(fields: [qualityId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "rating_ibfk_4")

  @@unique([mapId, submittedBy], map: "mapAndUser")
  @@index([difficultyId], map: "difficultyId")
  @@index([mapId], map: "mapId")
  @@index([qualityId], map: "qualityId")
  @@index([submittedBy], map: "submittedBy")
}

model review {
  id                 Int               @id @default(autoincrement()) @db.UnsignedMediumInt
  modId              Int               @db.UnsignedSmallInt
  reviewCollectionId Int               @db.UnsignedSmallInt
  timeSubmitted      Int
  likes              String?           @db.VarChar(1000)
  dislikes           String?           @db.VarChar(1000)
  otherComments      String?           @db.VarChar(1500)
  mod                mod               @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "review_ibfk_1")
  review_collection  review_collection @relation(fields: [reviewCollectionId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "review_ibfk_2")
  review_map         review_map[]

  @@unique([modId, reviewCollectionId], map: "modAndReviewCollection")
  @@index([modId], map: "modId")
  @@index([reviewCollectionId], map: "reviewCollectionId")
}

model review_collection {
  id          Int      @id @default(autoincrement()) @db.UnsignedSmallInt
  userId      Int      @db.UnsignedSmallInt
  name        String   @db.VarChar(100)
  description String   @db.VarChar(500)
  review      review[]
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "review_collection_ibfk_1")

  @@index([userId], map: "userId")
}

model review_map {
  id                Int     @id @default(autoincrement()) @db.UnsignedInt
  reviewId          Int     @db.UnsignedMediumInt
  mapId             Int     @db.UnsignedMediumInt
  lengthId          Int     @db.UnsignedTinyInt
  likes             String? @db.VarChar(500)
  dislikes          String? @db.VarChar(500)
  otherComments     String? @db.VarChar(500)
  displayRatingBool Boolean @default(false)
  length            length  @relation(fields: [lengthId], references: [id], onUpdate: Restrict, map: "review_map_ibfk_2")
  map               map     @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "review_map_ibfk_3")
  review            review  @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "review_map_ibfk_4")

  @@unique([reviewId, mapId], map: "review_map")
  @@index([lengthId], map: "lengthId")
  @@index([mapId], map: "mapId")
  @@index([reviewId], map: "reviewId")
}

model tech {
  id            Int             @id @default(autoincrement()) @db.UnsignedSmallInt
  name          String          @unique(map: "name") @db.VarChar(50)
  description   String?         @db.VarChar(150)
  difficultyId  Int             @db.UnsignedSmallInt
  maps_to_techs maps_to_techs[]
  difficulty    difficulty      @relation(fields: [difficultyId], references: [id], onUpdate: Restrict, map: "tech_ibfk_1")
  tech_video    tech_video[]

  @@index([difficultyId], map: "difficultyId")
}

model tech_video {
  id     Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  techId Int    @db.UnsignedSmallInt
  url    String @db.VarChar(100)
  tech   tech   @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tech_video_ibfk_1")

  @@index([techId], map: "techId")
}

model user {
  id                                         Int                 @id @default(autoincrement()) @db.UnsignedSmallInt
  displayName                                String              @db.VarChar(50)
  discordId                                  String?             @unique(map: "discordId") @db.VarChar(50)
  discordUsername                            String              @db.VarChar(32)
  discordDiscrim                             String              @db.VarChar(4)
  displayDiscord                             Boolean
  showCompletedMaps                          Boolean
  timeCreated                                Int
  permissions                                String
  accountStatus                              user_accountStatus  @default(Active)
  timeDeletedOrBanned                        Int?
  archive_map_archive_map_mapperUserIdTouser archive_map[]       @relation("archive_map_mapperUserIdTouser")
  archive_map_archive_map_submittedByTouser  archive_map[]       @relation("archive_map_submittedByTouser")
  archive_map_archive_map_approvedByTouser   archive_map[]       @relation("archive_map_approvedByTouser")
  archive_mod                                archive_mod[]
  map_map_mapperUserIdTouser                 map[]               @relation("map_mapperUserIdTouser")
  map_map_submittedByTouser                  map[]               @relation("map_submittedByTouser")
  map_map_approvedByTouser                   map[]               @relation("map_approvedByTouser")
  mod_mod_submittedByTouser                  mod[]               @relation("mod_submittedByTouser")
  mod_mod_approvedByTouser                   mod[]               @relation("mod_approvedByTouser")
  publisher                                  publisher[]
  rating                                     rating[]
  review_collection                          review_collection[]
  users_to_maps                              users_to_maps[]
  accounts                                   Account[]
  sessions                                   Session[]

  @@unique([discordUsername, discordDiscrim], map: "discordTag")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            Int     @db.UnsignedSmallInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int      @db.UnsignedSmallInt
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//End Next Auth models

model users_to_maps {
  userId Int  @db.UnsignedSmallInt
  mapId  Int  @db.UnsignedMediumInt
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "users_to_maps_ibfk_1")
  map    map  @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "users_to_maps_ibfk_2")

  @@id([userId, mapId])
  @@index([mapId], map: "mapId")
}

enum mod_type {
  Normal
  Collab
  Contest
  LobbyOther
}

enum user_accountStatus {
  Active
  Deleted
  Banned
  Unlinked
}

enum map_side {
  A
  B
  C
  D
  E
}
