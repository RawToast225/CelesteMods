generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Length {
  id          Int         @id @default(autoincrement()) @db.UnsignedTinyInt
  name        String      @unique @db.VarChar(20)
  description String      @db.VarChar(100)
  order       Int         @unique @db.UnsignedTinyInt
  map         Map[]
  reviewMap   ReviewMap[]
}

model Difficulty {
  id                 Int          @id @default(autoincrement()) @db.UnsignedSmallInt
  name               String       @db.VarChar(50)
  description        String?      @db.VarChar(100)
  parentDifficulty   Difficulty?  @relation("DifficultyToDifficulty", fields: [parentDifficultyId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  parentDifficultyId Int?         @default(0) @db.UnsignedSmallInt
  order              Int          @db.UnsignedTinyInt
  childDifficulty    Difficulty[] @relation("DifficultyToDifficulty")
  rating             Rating[]
  tech               Tech[]
  map                Map[]

  @@unique([parentDifficultyId, name])
  @@unique([parentDifficultyId, order])
  @@index([parentDifficultyId])
}

model Tech {
  id           Int           @id @default(autoincrement()) @db.UnsignedSmallInt
  name         String        @unique @db.VarChar(50)
  description  String?       @db.VarChar(150)
  difficulty   Difficulty    @relation(fields: [difficultyId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  difficultyId Int           @db.UnsignedSmallInt
  techVideo    TechVideo[]
  mapsToTechs  MapsToTechs[]

  @@index([difficultyId])
}

model TechVideo {
  id     Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  tech   Tech   @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  techId Int    @db.UnsignedSmallInt
  url    String @db.VarChar(100)

  @@index([techId])
}

model Publisher {
  id           Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  gamebananaId Int?   @unique @db.UnsignedMediumInt
  name         String @unique @db.VarChar(100)
  user         User?  @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Restrict)
  userId       Int?   @db.UnsignedSmallInt
  mod          Mod[]

  @@index([userId])
}

model Mod {
  id                    Int       @id @default(autoincrement()) @db.UnsignedSmallInt
  type                  ModType   @default(Normal)
  name                  String    @db.VarChar(200)
  publisher             Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  publisherId           Int       @db.UnsignedSmallInt
  contentWarning        Boolean   @default(false)
  notes                 String?   @db.VarChar(500)
  shortDescription      String    @db.VarChar(150)
  longDescription       String?   @db.VarChar(1500)
  gamebananaModId       Int       @unique @db.UnsignedMediumInt
  timeSubmitted         Int
  submittedByToUser     User?     @relation("Mod_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Restrict)
  submittedBy           Int?      @db.UnsignedSmallInt
  timeApproved          Int
  approvedByToUser      User?     @relation("Mod_ApprovedByToUser", fields: [approvedBy], references: [id], onDelete: SetNull, onUpdate: Restrict)
  approvedBy            Int?      @db.UnsignedSmallInt
  timeCreatedGamebanana Int
  map                   Map[]
  review                Review[]

  @@index([approvedBy])
  @@index([contentWarning])
  @@index([publisherId])
  @@index([submittedBy])
}

model Map {
  id                    Int                    @id @default(autoincrement()) @db.UnsignedMediumInt
  mod                   Mod                    @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  modId                 Int                    @db.UnsignedSmallInt
  mapperUserIdToUser    User?                  @relation("Map_MapperUserIdToUser", fields: [mapperUserId], references: [id], onDelete: SetNull, onUpdate: Restrict)
  mapperUserId          Int?                   @db.UnsignedSmallInt
  mapperNameString      String                 @db.VarChar(50)
  name                  String                 @db.VarChar(200)
  difficulty            Difficulty             @relation(fields: [canonicalDifficultyId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  canonicalDifficultyId Int                    @db.UnsignedSmallInt
  length                Length                 @relation(fields: [lengthId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  lengthId              Int                    @db.UnsignedTinyInt
  description           String?                @db.VarChar(500)
  notes                 String?                @db.VarChar(500)
  chapter               Int?                   @db.UnsignedTinyInt
  side                  MapSide?
  overallRank           Int?                   @db.UnsignedTinyInt
  mapRemovedFromModBool Boolean                @default(false)
  timeSubmitted         Int
  submittedByToUser     User?                  @relation("Map_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Restrict)
  submittedBy           Int?                   @db.UnsignedSmallInt
  timeApproved          Int
  approvedByToUser      User?                  @relation("Map_ApprovedByToUser", fields: [approvedBy], references: [id], onDelete: SetNull, onUpdate: Restrict)
  approvedBy            Int?                   @db.UnsignedSmallInt
  mapsToTechs           MapsToTechs[]
  rating                Rating[]
  reviewMap             ReviewMap[]
  usersToCompletedMaps  UsersToCompletedMaps[]

  @@unique([modId, chapter, side])
  @@index([approvedBy])
  @@index([canonicalDifficultyId])
  @@index([lengthId])
  @@index([mapperUserId])
  @@index([modId])
  @@index([submittedBy])
}

model MapsToTechs {
  map               Map     @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  mapId             Int     @db.UnsignedMediumInt
  tech              Tech    @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  techId            Int     @db.UnsignedSmallInt
  fullClearOnlyBool Boolean @default(false)

  @@id([mapId, techId])
  @@index([techId])
}

model Quality {
  id          Int      @id @default(autoincrement()) @db.UnsignedTinyInt
  name        String   @db.VarChar(20)
  description String   @db.VarChar(100)
  order       Int      @unique @db.UnsignedTinyInt
  rating      Rating[]
}

model Rating {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  map           Map         @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  mapId         Int         @db.UnsignedMediumInt
  user          User        @relation(fields: [submittedBy], references: [id], onDelete: Cascade, onUpdate: Restrict)
  submittedBy   Int         @db.UnsignedSmallInt
  timeSubmitted Int
  quality       Quality?    @relation(fields: [qualityId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  qualityId     Int?        @db.UnsignedTinyInt
  difficulty    Difficulty? @relation(fields: [difficultyId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  difficultyId  Int?        @db.UnsignedSmallInt

  @@unique([mapId, submittedBy])
  @@index([difficultyId])
  @@index([mapId])
  @@index([qualityId])
  @@index([submittedBy])
}

model Review {
  id                 Int              @id @default(autoincrement()) @db.UnsignedMediumInt
  mod                Mod              @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  modId              Int              @db.UnsignedSmallInt
  reviewCollection   ReviewCollection @relation(fields: [reviewCollectionId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  reviewCollectionId Int              @db.UnsignedSmallInt
  timeSubmitted      Int
  likes              String?          @db.VarChar(1000)
  dislikes           String?          @db.VarChar(1000)
  otherComments      String?          @db.VarChar(1500)
  reviewMap          ReviewMap[]

  @@unique([modId, reviewCollectionId])
  @@index([modId])
  @@index([reviewCollectionId])
}

model ReviewCollection {
  id          Int      @id @default(autoincrement()) @db.UnsignedSmallInt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  userId      Int      @db.UnsignedSmallInt
  name        String   @db.VarChar(100)
  description String   @db.VarChar(500)
  review      Review[]

  @@index([userId])
}

model ReviewMap {
  id                Int     @id @default(autoincrement()) @db.UnsignedInt
  reviewId          Int     @db.UnsignedMediumInt
  mapId             Int     @db.UnsignedMediumInt
  lengthId          Int     @db.UnsignedTinyInt
  likes             String? @db.VarChar(500)
  dislikes          String? @db.VarChar(500)
  otherComments     String? @db.VarChar(500)
  displayRatingBool Boolean @default(false)
  length            Length  @relation(fields: [lengthId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  map               Map     @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  review            Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([reviewId, mapId])
  @@index([lengthId])
  @@index([mapId])
  @@index([reviewId])
}

model User {
  id                     Int                    @id @default(autoincrement()) @db.UnsignedSmallInt
  displayName            String                 @db.VarChar(50)
  discordId              String?                @unique @db.VarChar(50)
  discordUsername        String                 @db.VarChar(32)
  discordDiscrim         String                 @db.VarChar(4)
  displayDiscord         Boolean
  showCompletedMaps      Boolean
  timeCreated            Int
  permissions            String
  accountStatus          User_AccountStatus     @default(Active)
  timeDeletedOrBanned    Int?
  map_mapperUserIdToUser Map[]                  @relation("Map_MapperUserIdToUser")
  map_submittedByToUser  Map[]                  @relation("Map_SubmittedByToUser")
  map_approvedByToUser   Map[]                  @relation("Map_ApprovedByToUser")
  mod_submittedByToUser  Mod[]                  @relation("Mod_SubmittedByToUser")
  mod_approvedByToUser   Mod[]                  @relation("Mod_ApprovedByToUser")
  publisher              Publisher[]
  rating                 Rating[]
  reviewCollection       ReviewCollection[]
  completedMaps          UsersToCompletedMaps[]
  Account                Account[]
  Session                Session[]

  @@unique([discordUsername, discordDiscrim])
}

model UsersToCompletedMaps {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  userId Int  @db.UnsignedSmallInt
  map    Map  @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  mapId  Int  @db.UnsignedMediumInt

  @@id([userId, mapId])
  @@index([mapId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  userId            Int     @db.UnsignedSmallInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  userId       Int      @db.UnsignedSmallInt
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//End Next Auth models

enum ModType {
  Normal
  Collab
  Contest
  LobbyOther
}

enum User_AccountStatus {
  Active
  Deleted
  Banned
  Unlinked
}

enum MapSide {
  A
  B
  C
  D
  E
}
