generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model difficulties {
  id                                                            Int            @id @default(autoincrement()) @db.UnsignedSmallInt
  name                                                          String         @db.VarChar(50)
  description                                                   String?        @db.VarChar(100)
  parentModID                                                   Int?           @db.UnsignedSmallInt
  parentDifficultyID                                            Int?           @db.UnsignedSmallInt
  order                                                         Int            @db.UnsignedTinyInt
  difficulties                                                  difficulties?  @relation("difficultiesTodifficulties_parentDifficultyID", fields: [parentDifficultyID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "difficulties_ibfk_2")
  mods_ids                                                      mods_ids?      @relation(fields: [parentModID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "difficulties_ibfk_1")
  other_difficulties                                            difficulties[] @relation("difficultiesTodifficulties_parentDifficultyID")
  maps_details_difficultiesTomaps_details_canonicalDifficultyID maps_details[] @relation("difficultiesTomaps_details_canonicalDifficultyID")
  maps_details_difficultiesTomaps_details_modDifficultyID       maps_details[] @relation("difficultiesTomaps_details_modDifficultyID")
  ratings_difficultiesToratings_gameplayDefaultDifficultyID     ratings[]      @relation("difficultiesToratings_gameplayDefaultDifficultyID")
  ratings_difficultiesToratings_techDefaultDifficultyID         ratings[]      @relation("difficultiesToratings_techDefaultDifficultyID")
  tech_list                                                     tech_list[]

  @@unique([parentModID, parentDifficultyID, order], map: "difficultiesByMod")
  @@index([parentDifficultyID], map: "difficulties_ibfk_2")
}

model golden_players {
  id          Int           @id @default(autoincrement()) @db.UnsignedSmallInt
  name        String        @db.VarChar(100)
  userID      Int?          @unique(map: "userID") @db.UnsignedSmallInt
  users       users?        @relation(fields: [userID], references: [id], onUpdate: Restrict, map: "golden_players_ibfk_1")
  golden_runs golden_runs[]
}

model golden_runs {
  id                                Int                                 @id @db.UnsignedSmallInt
  goldenID                          Int                                 @db.UnsignedSmallInt
  goldenPlayerID                    Int                                 @db.UnsignedSmallInt
  proofURL                          String?                             @db.VarChar(500)
  timeCompleted                     Int
  goldens                           goldens                             @relation(fields: [goldenID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "golden_runs_ibfk_1")
  golden_players                    golden_players                      @relation(fields: [goldenPlayerID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "golden_runs_ibfk_2")
  golden_runs_to_golden_submissions golden_runs_to_golden_submissions[]

  @@index([goldenID], map: "goldenID")
  @@index([goldenPlayerID], map: "goldenPlayerID")
}

model golden_runs_to_golden_submissions {
  goldenRunID        Int                @db.UnsignedSmallInt
  goldenSubmissionID Int                @db.UnsignedMediumInt
  golden_runs        golden_runs        @relation(fields: [goldenRunID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "golden_runs_to_golden_submissions_ibfk_1")
  golden_submissions golden_submissions @relation(fields: [goldenSubmissionID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "golden_runs_to_golden_submissions_ibfk_2")

  @@id([goldenRunID, goldenSubmissionID])
  @@index([goldenSubmissionID], map: "goldenSubmissionID")
}

model golden_submissions {
  id                                          Int                                 @id @default(autoincrement()) @db.UnsignedMediumInt
  timeSubmitted                               Int
  submittedBy                                 Int?                                @db.UnsignedSmallInt
  timeApproved                                Int?
  approvedBy                                  Int?                                @db.UnsignedSmallInt
  users_golden_submissions_approvedByTousers  users?                              @relation("golden_submissions_approvedByTousers", fields: [approvedBy], references: [id], onUpdate: Restrict, map: "golden_submissions_ibfk_2")
  users_golden_submissions_submittedByTousers users?                              @relation("golden_submissions_submittedByTousers", fields: [submittedBy], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "golden_submissions_ibfk_1")
  golden_runs_to_golden_submissions           golden_runs_to_golden_submissions[]
  goldens_to_golden_submissions               goldens_to_golden_submissions[]

  @@index([approvedBy], map: "approvedBy")
  @@index([submittedBy], map: "submittedBy")
}

model goldens {
  id                            Int                             @id @default(autoincrement()) @db.UnsignedSmallInt
  mapID                         Int                             @db.UnsignedMediumInt
  fullClearBool                 Boolean
  goldenList                    goldens_goldenList
  otherList                     String?                         @db.VarChar(30)
  topGoldenListRank             Int?                            @db.UnsignedSmallInt
  maps_ids                      maps_ids                        @relation(fields: [mapID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "goldens_ibfk_1")
  golden_runs                   golden_runs[]
  goldens_to_golden_submissions goldens_to_golden_submissions[]

  @@unique([mapID, fullClearBool], map: "mapPlusFullClear")
}

model goldens_to_golden_submissions {
  goldenID           Int                @db.UnsignedSmallInt
  goldenSubmissionID Int                @db.UnsignedMediumInt
  goldens            goldens            @relation(fields: [goldenID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "goldens_to_golden_submissions_ibfk_1")
  golden_submissions golden_submissions @relation(fields: [goldenSubmissionID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "goldens_to_golden_submissions_ibfk_2")

  @@id([goldenID, goldenSubmissionID])
  @@index([goldenSubmissionID], map: "goldenSubmissionID")
}

model map_lengths {
  id           Int            @id @default(autoincrement()) @db.UnsignedTinyInt
  name         String         @db.VarChar(20)
  description  String         @db.VarChar(100)
  order        Int            @unique(map: "order") @db.UnsignedTinyInt
  maps_details maps_details[]
  reviews_maps reviews_maps[]
}

model maps_details {
  id                                                            Int                @default(autoincrement()) @db.UnsignedMediumInt
  revision                                                      Int                @default(0) @db.UnsignedTinyInt
  mapperUserID                                                  Int?               @db.UnsignedSmallInt
  mapperNameString                                              String?            @db.VarChar(50)
  name                                                          String             @db.VarChar(200)
  canonicalDifficultyID                                         Int                @db.UnsignedSmallInt
  lengthID                                                      Int                @db.UnsignedTinyInt
  description                                                   String?            @db.VarChar(500)
  notes                                                         String?            @db.VarChar(500)
  chapter                                                       Int?               @db.UnsignedTinyInt
  side                                                          maps_details_side?
  modDifficultyID                                               Int?               @db.UnsignedSmallInt
  overallRank                                                   Int?               @db.UnsignedTinyInt
  mapRemovedFromModBool                                         Boolean            @default(false)
  timeSubmitted                                                 Int
  submittedBy                                                   Int?               @db.UnsignedSmallInt
  timeApproved                                                  Int?
  approvedBy                                                    Int?               @db.UnsignedSmallInt
  users_maps_details_approvedByTousers                          users?             @relation("maps_details_approvedByTousers", fields: [approvedBy], references: [id], onUpdate: Restrict, map: "maps_details_ibfk_7")
  difficulties_difficultiesTomaps_details_canonicalDifficultyID difficulties       @relation("difficultiesTomaps_details_canonicalDifficultyID", fields: [canonicalDifficultyID], references: [id], onUpdate: Restrict, map: "maps_details_ibfk_3")
  maps_ids                                                      maps_ids           @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "maps_details_ibfk_1")
  map_lengths                                                   map_lengths        @relation(fields: [lengthID], references: [id], onUpdate: Restrict, map: "maps_details_ibfk_4")
  users_maps_details_mapperUserIDTousers                        users?             @relation("maps_details_mapperUserIDTousers", fields: [mapperUserID], references: [id], onUpdate: Restrict, map: "maps_details_ibfk_2")
  difficulties_difficultiesTomaps_details_modDifficultyID       difficulties?      @relation("difficultiesTomaps_details_modDifficultyID", fields: [modDifficultyID], references: [id], onUpdate: Restrict, map: "maps_details_ibfk_5")
  users_maps_details_submittedByTousers                         users?             @relation("maps_details_submittedByTousers", fields: [submittedBy], references: [id], onUpdate: Restrict, map: "maps_details_ibfk_6")
  maps_to_tech_maps_detailsTomaps_to_tech_mapID                 maps_to_tech[]     @relation("maps_detailsTomaps_to_tech_mapID")
  maps_to_tech_maps_detailsTomaps_to_tech_revision              maps_to_tech[]     @relation("maps_detailsTomaps_to_tech_revision")

  @@id([id, revision])
  @@index([approvedBy], map: "approvedBy")
  @@index([canonicalDifficultyID], map: "assignedDifficultyID")
  @@index([modDifficultyID], map: "difficultyID")
  @@index([lengthID], map: "lengthID")
  @@index([mapperUserID], map: "mapperUserID")
  @@index([revision], map: "revision")
  @@index([submittedBy], map: "submittedBy")
}

model maps_ids {
  id                 Int            @id @default(autoincrement()) @db.UnsignedMediumInt
  modID              Int            @db.UnsignedSmallInt
  minimumModRevision Int            @db.UnsignedTinyInt
  mods_ids           mods_ids       @relation(fields: [modID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "maps_ids_ibfk_1")
  goldens            goldens[]
  maps_details       maps_details[]
  ratings            ratings[]

  @@index([modID], map: "modID")
}

model maps_to_tech {
  mapID                                            Int          @db.UnsignedMediumInt
  revision                                         Int          @db.UnsignedTinyInt
  techID                                           Int          @db.UnsignedSmallInt
  fullClearOnlyBool                                Boolean      @default(false)
  maps_details_maps_detailsTomaps_to_tech_mapID    maps_details @relation("maps_detailsTomaps_to_tech_mapID", fields: [mapID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "maps_to_tech_ibfk_3")
  maps_details_maps_detailsTomaps_to_tech_revision maps_details @relation("maps_detailsTomaps_to_tech_revision", fields: [revision], references: [revision], onDelete: Cascade, onUpdate: Restrict, map: "maps_to_tech_ibfk_4")
  tech_list                                        tech_list    @relation(fields: [techID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "maps_to_tech_ibfk_2")

  @@id([mapID, revision, techID])
  @@index([revision], map: "revision")
  @@index([techID], map: "techID")
}

model mods_details {
  id                                    Int               @db.UnsignedSmallInt
  revision                              Int               @default(0) @db.UnsignedTinyInt
  type                                  mods_details_type @default(Normal)
  name                                  String            @db.VarChar(200)
  publisherID                           Int               @db.UnsignedSmallInt
  contentWarning                        Boolean           @default(false)
  notes                                 String?           @db.VarChar(500)
  shortDescription                      String            @db.VarChar(150)
  longDescription                       String?           @db.VarChar(1500)
  gamebananaModID                       Int               @db.UnsignedMediumInt
  timeSubmitted                         Int
  submittedBy                           Int?              @db.UnsignedSmallInt
  timeApproved                          Int?
  approvedBy                            Int?              @db.UnsignedSmallInt
  users_mods_details_approvedByTousers  users?            @relation("mods_details_approvedByTousers", fields: [approvedBy], references: [id], onUpdate: Restrict, map: "mods_details_ibfk_4")
  mods_ids                              mods_ids          @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mods_details_ibfk_1")
  publishers                            publishers        @relation(fields: [publisherID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mods_details_ibfk_2")
  users_mods_details_submittedByTousers users?            @relation("mods_details_submittedByTousers", fields: [submittedBy], references: [id], onUpdate: Restrict, map: "mods_details_ibfk_3")

  @@id([id, revision])
  @@index([approvedBy], map: "approvedBy")
  @@index([contentWarning], map: "contentWarning")
  @@index([gamebananaModID], map: "gamebananaModID")
  @@index([publisherID], map: "publisherID")
  @@index([submittedBy], map: "submittedBy")
}

model mods_ids {
  id           Int            @id @default(autoincrement()) @db.UnsignedSmallInt
  difficulties difficulties[]
  maps_ids     maps_ids[]
  mods_details mods_details[]
  reviews      reviews[]
}

model publishers {
  id           Int            @id @default(autoincrement()) @db.UnsignedSmallInt
  gamebananaID Int            @unique(map: "gamebananaID") @db.UnsignedMediumInt
  name         String         @db.VarChar(100)
  userID       Int?           @db.UnsignedSmallInt
  users        users?         @relation(fields: [userID], references: [id], onUpdate: Restrict, map: "publishers_ibfk_1")
  mods_details mods_details[]

  @@index([userID], map: "userID")
}

model ratings {
  id                                                             Int              @id @default(autoincrement()) @db.UnsignedInt
  submittedBy                                                    Int              @db.UnsignedSmallInt
  mapID                                                          Int              @db.UnsignedMediumInt
  timeSubmitted                                                  Int
  quality                                                        ratings_quality?
  techDefaultDifficultyID                                        Int?             @db.UnsignedSmallInt
  gameplayDefaultDifficultyID                                    Int?             @db.UnsignedSmallInt
  difficulties_difficultiesToratings_gameplayDefaultDifficultyID difficulties?    @relation("difficultiesToratings_gameplayDefaultDifficultyID", fields: [gameplayDefaultDifficultyID], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ratings_ibfk_3")
  maps_ids                                                       maps_ids         @relation(fields: [mapID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "ratings_ibfk_2")
  users                                                          users            @relation(fields: [submittedBy], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "ratings_ibfk_1")
  difficulties_difficultiesToratings_techDefaultDifficultyID     difficulties?    @relation("difficultiesToratings_techDefaultDifficultyID", fields: [techDefaultDifficultyID], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ratings_ibfk_4")
  reviews_maps                                                   reviews_maps?

  @@index([gameplayDefaultDifficultyID], map: "gameplayDefaultDifficultyID")
  @@index([mapID], map: "mapID")
  @@index([submittedBy], map: "submittedBy")
  @@index([techDefaultDifficultyID], map: "techDefaultDifficultyID")
}

model reviews {
  id            Int            @id @default(autoincrement()) @db.UnsignedMediumInt
  timeSubmitted Int
  submittedBy   Int            @db.UnsignedSmallInt
  modID         Int            @db.UnsignedSmallInt
  likes         String?        @db.VarChar(1000)
  dislikes      String?        @db.VarChar(1000)
  otherComments String?        @db.VarChar(1500)
  mods_ids      mods_ids       @relation(fields: [modID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviews_ibfk_2")
  users         users          @relation(fields: [submittedBy], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviews_ibfk_1")
  reviews_maps  reviews_maps[]

  @@index([modID], map: "modID")
  @@index([submittedBy], map: "submittedBy")
}

model reviews_maps {
  id                Int         @id @default(autoincrement()) @db.UnsignedInt
  reviewID          Int?        @db.UnsignedMediumInt
  ratingID          Int?        @unique(map: "ratingID") @db.UnsignedInt
  displayRatingBool Boolean?
  lengthID          Int         @db.UnsignedTinyInt
  likes             String      @db.VarChar(500)
  dislikes          String      @db.VarChar(500)
  otherComments     String      @db.VarChar(500)
  map_lengths       map_lengths @relation(fields: [lengthID], references: [id], onUpdate: Restrict, map: "reviews_maps_ibfk_2")
  ratings           ratings?    @relation(fields: [ratingID], references: [id], onUpdate: Restrict, map: "reviews_maps_ibfk_3")
  reviews           reviews?    @relation(fields: [reviewID], references: [id], onUpdate: Restrict, map: "reviews_maps_ibfk_1")

  @@index([lengthID], map: "lengthID")
  @@index([reviewID], map: "reviewID")
}

model tech_list {
  id                  Int            @id @default(autoincrement()) @db.UnsignedSmallInt
  name                String         @unique(map: "name") @db.VarChar(50)
  description         String?        @db.VarChar(150)
  defaultDifficultyID Int            @db.UnsignedSmallInt
  difficulties        difficulties   @relation(fields: [defaultDifficultyID], references: [id], onUpdate: Restrict, map: "tech_list_ibfk_1")
  maps_to_tech        maps_to_tech[]
  tech_videos         tech_videos[]

  @@index([defaultDifficultyID], map: "defaultDifficultyID")
}

model tech_videos {
  id        Int       @id @default(autoincrement()) @db.UnsignedSmallInt
  techID    Int       @db.UnsignedSmallInt
  url       String    @db.VarChar(100)
  tech_list tech_list @relation(fields: [techID], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tech_videos_ibfk_1")

  @@index([techID], map: "techID")
}

model users {
  id                                                       Int                  @id @default(autoincrement()) @db.UnsignedSmallInt
  displayName                                              String               @db.VarChar(50)
  discordID                                                String               @unique(map: "discordID") @db.VarChar(50)
  discordUsername                                          String               @db.VarChar(32)
  discordDiscrim                                           String               @db.VarChar(4)
  displayDiscord                                           Boolean
  timeCreated                                              Int
  permissions                                              String
  accountStatus                                            users_accountStatus  @default(Active)
  timeDeletedOrBanned                                      Int?
  golden_players                                           golden_players?
  golden_submissions_golden_submissions_approvedByTousers  golden_submissions[] @relation("golden_submissions_approvedByTousers")
  golden_submissions_golden_submissions_submittedByTousers golden_submissions[] @relation("golden_submissions_submittedByTousers")
  maps_details_maps_details_approvedByTousers              maps_details[]       @relation("maps_details_approvedByTousers")
  maps_details_maps_details_mapperUserIDTousers            maps_details[]       @relation("maps_details_mapperUserIDTousers")
  maps_details_maps_details_submittedByTousers             maps_details[]       @relation("maps_details_submittedByTousers")
  mods_details_mods_details_approvedByTousers              mods_details[]       @relation("mods_details_approvedByTousers")
  mods_details_mods_details_submittedByTousers             mods_details[]       @relation("mods_details_submittedByTousers")
  publishers                                               publishers[]
  ratings                                                  ratings[]
  reviews                                                  reviews[]
}

enum goldens_goldenList {
  Hard
  Standard
  Full_Game_Runs_And_Challenges
  Other
  Archived
  Rejected
}

enum maps_details_side {
  A
  B
  C
  D
  E
}

enum mods_details_type {
  Normal
  Collab
  Contest
  Lobby
}

enum ratings_quality {
  Amazing
  Very_Well_Made @map("Very Well Made")
  Recommended
  Neutral
  Not_Recommended @map("Not Recommended")
}

enum users_accountStatus {
  Active
  Deleted
  Banned
}
